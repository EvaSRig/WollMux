# Dies ist eine Default-Config-Datei.
# Sie konfiguriert die Datenquellen, auf die das Briefkopfsystem zugreift. Dabei wird
# aus dem LDAP und verschiedenen Textdateien eine Datenquelle "Personal" zusammengesetzt,
# aus der das BKS die Briefkopfdaten bezieht.

  # Die SENDER_SOURCE legt fest, welche Datenquelle als Hauptdatenquelle
  # für die Suche des aktuellen Absenders im WollMux verwendet werden soll.
SENDER_SOURCE "Personal"

  # Die Definition der Abbildung des LDAP-Verzeichnisses auf die tabellarische Struktur
  # des BKS ist etwas komplexer und deshalb in eine eigene Datei ausgelagert.
%include "Datenquelle_ldap.conf"

Datenquellen(
  
  # Die folgenden 3 Datenquellen demonstrieren, wie Mitarbeiter, die nicht im 
  # zentralen LDAP erfasst sind, in die Datenbank des BKS eingebaut werden können.

          # Zuerst wird eine Datenquelle des Typs "conf" (eine einfache Textdatei im
          # WollMux-Config-Format) definiert, die die zusätzlichen Mitarbeiter enthält.
			  Datenquelle(
			    NAME "MitarbeiterDieNichtImLDAPStehen"
			    TYPE "conf"
			    URL "Daten_Mitarbeiter_die_nicht_im_LDAP_stehen.conf"
			    Schluessel("Vorname" "Nachname" "Rolle")
			  )
			  
			    # Die obige Datenquelle hat keine Spalte "OID", da dies die eindeutige
			    # LDAP-Objekt ID ist, die Mitarbeiter, die nicht im LDAP stehen natürlich
			    # nicht haben. Da eine Vereinigung 2er Datenquellen mittels "union" nur
			    # funktioniert, wenn die Datenquellen-Schemata identisch sind, fügen wir
			    # hier dem Schema der Datenquelle "MitarbeiterDieNichtImLDAPStehen" eine
			    # Dummy-Spalte "OID" hinzu. Diese enthält keine Werte, sondern dient nur dazu
			    # die Schema-Bedingung der "union"-Datenquelle zu befriedigen.
			  Datenquelle(
			    NAME "MitarbeiterDieNichtImLDAPStehen"
			    TYPE "schema"
			    SOURCE "MitarbeiterDieNichtImLDAPStehen"
			    ADD("OID")
			  )
			  
			    # Nachdem wir eben die Schemata der Datenquellen "ldap" und 
			    # "MitarbeiterDieNichtImLDAPStehen" angeglichen haben, können wir diese nun
			    # Vereinigen zu einer Datenquelle, die alle Datensätze aus beiden Datenquellen
			    # bereitstellt.
			    # Die Ergebnisdatenquelle nennen wir "Personal". Dies ist der ganz am Anfang
			    # als SENDER_SOURCE festgelegte Name. Das BKS verwendet die letzte Datenquelle
			    # dieses Namens, die in der wollmux.conf definiert ist.
			  Datenquelle(
			    NAME "Personal"
			    TYPE "union"
			    SOURCE1 "MitarbeiterDieNichtImLDAPStehen"
			    SOURCE2 "ldap"
			  )
  
    # Die Daten im LDAP sind oft fehlerhaft. Neben der Möglichkeit des einzelnen Benutzers,
    # die Einträge seiner persönlichen Absenderliste lokal für sich zu korrigieren
    # gibt es die Möglichkeit, eine Korrekturdatei zentral zur Verfügung zu stellen.
    # Soll die Möglichkeit der Bearbeitung der Absenderdaten des Benutzers deaktiviert
    # werden muss dies auch erfolgen. Die folgende Datenquelle demonstriert, wie eine
    # Datenquelle mit Korrekturen für den LDAP auszusehen hat. Wichtig ist, dass sie
    # exakt das selbe Schema hat, wie die zu korrigierende Datenquelle (in diesem Fall
    # "Personal"). Ist dies nicht gegeben, so muss wie weiter oben demonstriert mit Hilfe
    # einer "schema"-Datenquelle eine Anpassung vorgenommen werden.
    # Beachte: Die Definition der Datenquelle "LDAPFixes" alleine hat noch keinerlei
    # Wirkung auf die Datenquelle "Personal". Die Korrekturen werden erst durch die
    # darauffolgende Datenquelle des Typs "prefer" wirksam.
  Datenquelle(
    NAME "LDAPFixes"
    TYPE "conf"
    URL "Daten_ldapfixes.conf"
    Schluessel("OID")
  )
  
    # Diese Datenquellendefinition macht die Korrekturen der Datenquelle "LDAPFixes"
    # für das Briefkopfsystem sichtbar, indem sie die Datenquelle "Personal" neu definiert
    # als Datenquelle des Typs "prefer" (engl. "bevorzugen").
  Datenquelle(
    NAME "Personal"
    TYPE "prefer"
    SOURCE "LDAPFixes"
    OVER "Personal"
  )
  
  
  # Die nächsten 3 Datenquellen demonstrieren, wie in der Personaldatenbank fehlende
  # (weil nicht im LDAP vorhandene) Spalten hinzugefügt werden können. Anders als 
  # im weiter oben gezeigten Beispiel wo die "OID" Spalte ergänzt wurde, sollen hier keine
  # leeren Spalten hinzugefügt werden, sondern Spalten, deren Werte in Abhängigkeit von
  # der OrgaKurz-Spalte aus einer Textdatei gezogen werden.


          # Als erster Schritt wird eine Datenquelle definiert, die mit einer Textdatei
          # OrgaKurz-Werte auf Spaltenwerte abbildet.
			  Datenquelle(
			    NAME "OrgaSpezifischeErgaenzungen"
			    TYPE "conf"
			    URL "Daten_OrgaSpezifischeErgaenzungen.conf"
			    Schluessel("OrgaKurz")
			  )
			
			    # Die neuen Spalten der gerade definierten Datenquelle werden der Datenquelle
			    # Personal mittels "attach" angehängt.
			  Datenquelle(
			    NAME "Personal"
			    TYPE "attach"
			    SOURCE "Personal"
			    ATTACH "OrgaSpezifischeErgaenzungen"
			    MATCH("OrgaKurz" "OrgaKurz")
			  )
			  
			    # Die durch "attach" angehängten Spalten haben zur Vermeidung von Konflikten
			    # mit bereits bestehenden Spalten Namen bekommen wie
			    # "OrgaSpezifischeErgaenzungen__Bank1Name". Diese sind einerseits unhandlich
			    # und entsprechen andererseits auch nicht den Bezeichnern, wie sie in der
			    # Konfigdatei des Absenderdaten Bearbeiten Dialogs verwendet werden. Deshalb
			    # müssen sie hier umbenannt werden. Dazu dient eine "schema" Datenquelle.
			    #
			    # Zusätzlich zur Umbenennung der Spalten werden noch folgende Änderungen
			    # vorgenommen:
			    #  1. Die Spalte "OrgaSpezifischeErgaenzungen__OrgaKurz" wird ganz entfernt.
			    #     Da sie wegen der MATCH-Bedingung in der "attach"-Datenquelle identisch
			    #     zur Spalte "OrgaKurz" ist, erfüllt sie keinen sinnvollen Zweck.
			    #  2. Eine leere Spalte "Sprechzeiten" wird hinzugefügt. Diese wird vom 
			    #     Briefkopfsystem verwendet, ist jedoch nicht im LDAP und auch nicht
			    #     in OrgaSpezifischeErgaenzungen enthalten.
			  Datenquelle(
			    NAME "Personal"
			    TYPE "schema"
			    SOURCE "Personal"
			    RENAME("OrgaSpezifischeErgaenzungen__Bank1Name" "Bank1Name")
			    RENAME("OrgaSpezifischeErgaenzungen__Bank1Kto" "Bank1Kto")
			    RENAME("OrgaSpezifischeErgaenzungen__Bank1BLZ" "Bank1BLZ")
			    RENAME("OrgaSpezifischeErgaenzungen__Bank2Name" "Bank2Name")
			    RENAME("OrgaSpezifischeErgaenzungen__Bank2Kto" "Bank2Kto")
			    RENAME("OrgaSpezifischeErgaenzungen__Bank2BLZ" "Bank2BLZ")
			    RENAME("OrgaSpezifischeErgaenzungen__Homepage" "Homepage")
			    DROP("OrgaSpezifischeErgaenzungen__OrgaKurz")
			    ADD("Sprechzeiten")
			  )
  
  # Die folgenden 3 Datenquellen ergänzen die Spalte "DienstBezLang". Dies erfolgt ganz
  # analog zum Anhängen der Datenquelle OrgaSpezifischeErgaenzungen weiter oben.
  
			  Datenquelle( 
			    NAME "DienstBezLang"
			    TYPE "conf"
			    URL "Daten_DienstBezLang.conf"
			    Schluessel("DienstBezKurz" "Anrede")
			  )
			
			  Datenquelle(
			    NAME "PersonalMitDienstBezLang"
			
			    TYPE "attach"
			    
			    SOURCE "Personal"
			    ATTACH "DienstBezLang"
			    MATCH ("DienstBezKurz" "DienstBezKurz")
			    MATCH ("Anrede" "Anrede")
			  )
			  
			  Datenquelle(
			    NAME "Personal"
			    TYPE "schema"
			    SOURCE "PersonalMitDienstBezLang"
			    RENAME("DienstBezLang__DienstBezLang" "DienstBezLang")
			    DROP("DienstBezLang__DienstBezKurz")
			    DROP("DienstBezLang__Anrede")
			  )


  # Die folgenden 3 Datenquellen ergänzen Spalten mit ÖPNV-Verbindungen, in Abhängigkeit
  # vom Dienstgebäude.

  Datenquelle(
    NAME "OPNV"
    TYPE "conf"
    URL "Daten_OPNV.conf"
    Schluessel("Adresse")
  )
  
  Datenquelle(
    NAME "OPNVmitDienstgebaeude"
    TYPE "attach"
   
    SOURCE "Personal"
    ATTACH "OPNV"
    MATCH("Dienstgebaeude" "Adresse")
  )
  
  Datenquelle(
    NAME "Personal"
    TYPE "schema"
    SOURCE "OPNVmitDienstgebaeude"
    RENAME("OPNV__Adresse" "Adresse")
    RENAME("OPNV__OPNV1" "OPNV1")
    RENAME("OPNV__OPNV2" "OPNV2")
    RENAME("OPNV__OPNV3" "OPNV3")
    RENAME("OPNV__OPNV4" "OPNV4")
  )


)
