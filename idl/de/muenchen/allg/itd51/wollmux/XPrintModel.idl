/*
 * Dateiname: XPrintModel.idl
 * Projekt  : WollMux
 * Funktion : Repräsentiert die Schnittstelle WollMux Komfortdruckfunktionen
 * 
 * Copyright: Landeshauptstadt München
 *
 * @author Christoph Lutz (D-III-ITD 5.1)
 * @version 1.0
 * 
 */

#ifndef __de_muenchen_allg_itd51_wollmux_XPrintModel_idl__ 
#define __de_muenchen_allg_itd51_wollmux_XPrintModel_idl__ 
 
#include <com/sun/star/uno/XInterface.idl> 
#include <com/sun/star/text/XTextDocument.idl> 
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/beans/PropertyValue.idl>
  
module de {  module muenchen {  module allg { module itd51 { module wollmux {
 
/** 
  Jeder Druckfunktion wird beim Aufruf ein XPrintModel-Objekt übergeben, über
  das der Zugriff auf das Dokument und Komfortmethoden für den Druck zur 
  Verfuegung stehen. Verschiedene Druckfunktionen können dabei zu einer 
  Aufrufkette zusammengefügt sein.
 */
interface XPrintModel
{

    /**
     * Jede Druckfunktion kann über dieses Interface beliebige funktionsspezifische 
     * Properties im XPrintModel setzen, die von anderen Druckfunktionen in der
     * Aufrufkette des XPrintModels ausgewertet werden können. Abweichend vom
     * Standardverhalten von XPropertySet akzeptiert diese Implementierung alle
     * Property-Namen und fügt Properties neu hinzu, wenn sie noch nicht vorhanden
     * sind.
     */
	interface com::sun::star::beans::XPropertySet;
	
    /**
     * Lädt die in der wollmux.conf definierte Druckfunktion mit dem Namen
     * functionName in das XPrintModel und ordnet sie gemäß dem ORDER-Attribut
     * an der richtigen Position in die Aufrufkette der zu bearbeitenden
     * Druckfunktionen ein; Wird die Druckfunktion aufgerufen, so bekommt sie
     * genau ein Argument (dieses XPrintModel) übergeben.
     * 
     * @param functionName
     *          Name der Druckfunktion, die durch das MasterPrintModel verwaltet
     *          werden soll.
     * @return liefert true, wenn die Druckfunktion erfolgreich in die
     *         Aufrufkette übernommen wurde oder bereits geladen war und false,
     *         wenn die Druckfunktion aufgrund vorangegangener Fehler nicht in
     *         die Aufrufkette aufgenommen werden konnte.
     */
    boolean usePrintFunction([in] string functionName);

    /**
     * Liefert das XTextDocument mit dem die Druckfunktion aufgerufen wurde.
     */
    com::sun::star::text::XTextDocument getTextDocument();

    /**
     * Deprecated: Bitte benutzen Sie statt dieser Methode die Methode
     * printWithProps() mit dem entsprechend gesetzten Property "CopyCount".
     * Diese Methode dient nur der Abwärtskompatibilität mit älteren
     * XPrintModels und verwendet intern ebenfalls die Methode printWithProps()
     * und der Property "CopyCount".
     */
    void print( [in] short numberOfCopies);

    /**
     * Druckt das TextDocument auf dem aktuell eingestellten Drucker aus oder
     * leitet die Anfrage an die nächste verfügbare Druckfunktion in der
     * Aufrufkette weiter, wenn eine weitere Druckfunktion vorhanden ist;
     * Abhängig von der gesetzten Druckfunktion werden dabei verschiedene
     * Properties, die über setPropertyValue(...) gesetzt wurden ausgewertet.
     */
    void printWithProps();
	
    /**
     * Zeigt den PrintSetupDialog an, über den der aktuelle Drucker ausgewählt
     * und geändert werden kann.
     * 
     * @param onlyOnce
     *          Gibt an, dass der Dialog nur beim ersten Aufruf (aus Sicht eines
     *          Dokuments) der Methode angezeigt wird. Wurde bereits vor dem
     *          Aufruf ein PrintSetup-Dialog gestartet, so öffnet sich der
     *          Dialog nicht und die Methode endet ohne Aktion.
     */
    void showPrinterSetupDialog( [in] boolean onlyOnce);
		
    /**
     * Falls es sich bei dem zugehörigen Dokument um ein Formulardokument (mit
     * einer Formularbeschreibung) handelt, wird das Formularfeld mit der ID id
     * auf den neuen Wert value gesetzt und alle von diesem Formularfeld
     * abhängigen Formularfelder entsprechend angepasst. Handelt es sich beim
     * zugehörigen Dokument um ein Dokument ohne Formularbeschreibung, so werden
     * nur alle insertFormValue-Kommandos dieses Dokuments angepasst, die die ID
     * id besitzen.
     * 
     * @param id
     *          Die ID des Formularfeldes, dessen Wert verändert werden soll.
     *          Ist die FormGUI aktiv, so werden auch alle von id abhängigen
     *          Formularwerte neu gesetzt.
     * @param value
     *          Der neue Wert des Formularfeldes id
     */
    void setFormValue( [in] string id, [in] string value);

    /**
     * Liefert true, wenn das Dokument als "modifiziert" markiert ist und damit
     * z.B. die "Speichern?" Abfrage vor dem Schließen erscheint.
     * 
     * Manche Druckfunktionen verändern u.U. den Inhalt von Dokumenten. Trotzdem
     * kann es sein, dass eine solche Druckfunktion den "Modifiziert"-Status des
     * Dokuments nicht verändern darf um ungewünschte "Speichern?"-Abfragen zu
     * verhindern. In diesem Fall kann der "Modifiziert"-Status mit folgendem
     * Konstrukt innerhalb der Druckfunktion unverändert gehalten werden:
     * 
     * boolean modified = pmod.getDocumentModified();
     * 
     * ...die eigentliche Druckfunktion, die das Dokument verändert...
     * 
     * pmod.setDocumentModified(modified);
     */
    boolean getDocumentModified();

    /**
     * Diese Methode setzt den DocumentModified-Status auf modified.
     */
    void setDocumentModified( [in] boolean modified);
	
    /**
     * Sammelt alle Formularfelder des Dokuments auf, die nicht von
     * WollMux-Kommandos umgeben sind, jedoch trotzdem vom WollMux verstanden
     * und befüllt werden (derzeit c,s,s,t,textfield,Database-Felder). So werden
     * z.B. Seriendruckfelder erkannt, die erst nach dem Öffnen des Dokuments
     * manuell hinzugefügt wurden.
     */
    void collectNonWollMuxFormFields();
    
    /**
     * Diese Methode setzt die Eigenschaften "Sichtbar" (visible) und die
     * Anzeige der Hintergrundfarbe (showHighlightColor) für alle Druckblöcke
     * eines bestimmten Blocktyps blockName (z.B. "AllVersions"). 
     * 
     * @param blockName
     *          Der Blocktyp dessen Druckblöcke behandelt werden sollen.
     *          Folgende Blocknamen werden derzeit unterstützt: "AllVersions",
     *          "DraftOnly" und "NotInOriginal"
     * @param visible
     *          Der Block wird sichtbar, wenn visible==true und unsichtbar, wenn
     *          visible==false.
     * @param showHighlightColor
     *          gibt an ob die Hintergrundfarbe angezeigt werden soll (gilt nur,
     *          wenn zu einem betroffenen Druckblock auch eine Hintergrundfarbe
     *          angegeben ist).
     * 
     * @author Christoph Lutz (D-III-ITD-5.1)
     */
	void setPrintBlocksProps([in] string blockname, [in] boolean visible, [in] boolean showHighlightColor);

};

}; }; }; }; };
 
#endif
