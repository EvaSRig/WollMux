/*
 * Dateiname: XPALChangeEventBroadcaster.idl
 * Projekt  : WollMux
 * Funktion : Interface-Definition für einen Broadcaster von Änderungen an der Persönliche Absenderliste (PAL)
 * 
 * Copyright (C) 2009 Landeshauptstadt München
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. 
 *
 * @author Christoph Lutz (D-III-ITD 5.1)
 * @version 1.0
 * 
 */

#ifndef __de_muenchen_allg_itd51_wollmux_XPALChangeEventBroadcaster_idl__ 
#define __de_muenchen_allg_itd51_wollmux_XPALChangeEventBroadcaster_idl__ 
 
#include "XPALChangeEventListener.idl" 
 
module de {  module muenchen {  module allg { module itd51 { module wollmux {

/** 
  Das Interface XPALChangeEventBroadcasteristener definiert einen Broadcaster, der über
  Änderungen an der Persönlichen Absenderliste (PAL) informieren kann. Er enthält
  Methoden zum Registrieren und Deregistrieren von XPALChangeEventListenern.
 */ 
interface XPALChangeEventBroadcaster
{
    /**
      Diese Methode registriert einen XPALChangeEventListener, der updates
      empfängt wenn sich die PAL ändert. Nach dem Registrieren wird sofort ein
      ON_SELECTION_CHANGED Ereignis ausgelöst, welches dafür sort, dass sofort
      ein erster update aller Listener ausgeführt wird. Die Methode ignoriert
      alle XPALChangeEventListenener-Instanzen, die bereits registriert wurden.
      Mehrfachregistrierung der selben Instanz ist also nicht möglich.
     */
	void addPALChangeEventListener( [in] XPALChangeEventListener listener);

    /**
      Diese Methode registriert einen XPALChangeEventListener, der updates
      empfängt wenn sich die PAL ändert; nach der Registrierung wird geprüft, ob
      der WollMux und der XPALChangeEventListener die selbe WollMux-Konfiguration
      verwenden, wozu der Listener den HashCode wollmuxConfHashCode der aktuellen
      WollMux-Konfiguration übermittelt. Stimmt wollmuxConfHashCode nicht mit dem
      HashCode der WollMux-Konfiguration des WollMux überein, so erscheint ein
      Dialog, der vor möglichen Fehlern warnt. Nach dem Registrieren wird sofort
      ein ON_SELECTION_CHANGED Ereignis ausgelöst, welches dafür sort, dass
      sofort ein erster update aller Listener ausgeführt wird. Die Methode
      ignoriert alle XPALChangeEventListenener-Instanzen, die bereits registriert
      wurden. Mehrfachregistrierung der selben Instanz ist also nicht möglich.
      
      @param l
               Der zu registrierende XPALChangeEventListener
      @param wollmuxConfHashCode
               Der HashCode der WollMux-Config der zur Konsistenzprüfung
               herangezogen wird und über
               WollMuxFiles.getWollMuxConf().getStringRepresentation().hashCode()
               erzeugt wird.
     */
	void addPALChangeEventListenerWithConsistencyCheck( [in] XPALChangeEventListener listener, [in] long wollmuxConfHashCode);

    /**
      Diese Methode deregistriert einen XPALChangeEventListener wenn er bereits
      registriert war.
     */
	void removePALChangeEventListener( [in] XPALChangeEventListener listener);
};

}; }; }; }; };
 
#endif
