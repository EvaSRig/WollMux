#!/usr/bin/perl -l
# Copyright (c) 2008 Landeshauptstadt München
#
# Author: Matthias S. Benkmann
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;


{ #main()

#our $statefun = \&wait_for_latest;

# { "text" => ""
#   "Roadmap des WollMux" => { "text" => "Alle bisher veröffentlichten Versionen ..."
#                              "Zukunft" => { "text" => ""
#                                             "Nächste Version" => { "text" => ""
#                                                                    "Erledigte Tickets" => { "text" => "..."
#                                                                                           }
#                                                                    "Release Notes" => { "text" => "..."
#                                                                                       }
#                                                                  }
#                                           }
#                            }
# }

my $page = { "text" => "" };

open(my $in, "html2text -nobs http://limux.tvc.muenchen.de/wiki/index.php/Roadmap_des_WollMux|") or error("Couldn't read from Wiki: $!");
parse($page, $in, 1000000);

print " " x 1,"=" x 20, " Neu in dieser Version ", "=" x 20;
print $page->{"Roadmap des WollMux"}->{"Zukunft"}->{"Nächste Version"}->{"Release Notes"}->{"text"};
print $page->{"Roadmap des WollMux"}->{"Zukunft"}->{"Nächste Version"}->{"Release Notes Erweitert"}->{"text"};

my $oldversions = $page->{"Roadmap des WollMux"}->{"Vergangenheit"};
for my $version (reverse sort versionsort keys %$oldversions)
{
  if ($version ne "text")
  {
    print "\n\n", " " x 1,"=" x 20, " Neu in $version ", "=" x 20;
    print $oldversions->{$version}->{"Release Notes"}->{"text"};
    print $oldversions->{$version}->{"Release Notes Erweitert"}->{"text"} if defined($oldversions->{$version}->{"Release Notes Erweitert"});
  }
}

} #main()


sub versionsort($$)
{
  my ($a, $b) = @_;
  my ($a1,$a2,$a3,$a4,$a5) = ($a =~ m/[^0-9]*([0-9]+)\.([0-9]+)(\.([0-9]+))?([a-zA-Z])?/);
  my ($b1,$b2,$b3,$b4,$b5) = ($b =~ m/[^0-9]*([0-9]+)\.([0-9]+)(\.([0-9]+))?([a-zA-Z])?/);
  if (!defined($a1))
  {
    return -1 if defined($b1);
    return 0;
  }
  return 1 if !defined($b1);
  
  if (!defined($a4))
  {
      $a4 = 0;
  }
  if (!defined($b4))
  {
      $b4 = 0;
  }

  if ($a1 == $b1)
  {
    if ($a2 == $b2)
    {
      if ($a4 == $b4)
      {
        if (defined($a5))
        {
          return 1 if !defined($b5);
          return $a5 cmp $b5;
        }
        else
        {
          return -1 if defined($b5);
          return 0;
        }
      }
      else
      {
        return $a3 <=> $b3;
      }
    }
    else
    {
      return $a2 <=> $b2;
    }
  }
  else
  {
    return $a1 <=> $b1;
  }
}

# $line = parse($node, $in, $level)
sub parse
{
  my ($node, $in, $level) = @_;

  while (<$in>)
  {
    my $line = $_;
    chomp $line;
    while (defined($line))
    {
      if (my ($asterix, $title) = ($line =~ m/^(\*+)(?:\s\[bearbeiten\])?\s+([^*]+\S)\s+\*+/))
      {
        my $newlevel = length($asterix);
        if ($newlevel < $level)
        {
          my $newnode = { "text" => "" };
          $node->{$title} = $newnode;
          $line = parse($newnode, $in, $newlevel);
        }
        else
        {
          return $line;
        }
      }
      else # if non-title line
      {
        $node->{"text"} .= "\n" . $line;
        $line = undef;
      }
    }
  }
  
  return undef;
}

sub error
{
  print STDERR "ERROR: ", @_;
  exit 1
}
