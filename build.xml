<project default="all">
	<!--
	*****************************************************************
	Build-Datei für den WollMux.
	
	Test bla bla
	
	Die Build-Datei stellt Haupt Main-Targets zur Verfügung, die für
	die Erzeugung des WollMux interessant sind:
	* package: erzeugt ein WollMux.uno.pkg-Paket
	* install: erzeugt und installiert das WollMux.uno.pkg-Paket mit
	           unopkg add im Benutzerbereich.
	           
	Vorraussetzungen für die erfolgreiche Paketerzeugung:
	* <OOoPath>/program ist in der PATH-Variable
	* Nur unter Linux: Die Umgebungsvariable LD_LIBRARY_PATH muss
	  ebenfalls <OOoPath>/program enthalten.
	* Die Executables javamaker, idlc und regmerge des OOo2-SDKs werden
	  über die Pfad-Variable gefunden. Entweder Sie kopieren diese drei
	  Dateien nach <OOoPath>/program oder sie nehmen das Verzeichnis
	  <OOoSDK2>/(linux|windows)/bin in die Pfad-Variable auf.
	* Die Eclipse-Projekte OOo-SDK und UNOHelper sind aus dem 
	  svn-Repository ausgecheckt worden und befinden sich in den
	  entsprechenden Nachbarverzeichnissen zum WollMux-Projektverzeichnis.
    * Die Kommandozeilenversion von svn sollte installiert sein und im PATH
      stehen, damit die buildinfo-Datei erzeugt werden kann.
    * If ant gives you the error "Unable to locate tools.jar...." you need to set 
      JAVA_HOME to the root of a Java SDK installation, rather than just a JRE.
	
	Datum:  21.11.2005
	Author: Christoph Lutz (D-III-ITD-5.1), Matthias Benkmann (D-III-ITD-5.1)
	*****************************************************************
	-->

	<property name="COMPONENT" value="WollMux" />
	<property name="MAKE_DIR" value="." />
<!--	<exec executable="${MAKE_DIR}/makeversion" dir="${MAKE_DIR}" failifexecutionfails="false" failonerror="true" outputproperty="VERSION"/> -->
	<property name="VERSION" value="1.5.1" />
	<property name="RDB_DIR" value="oxt" />
	<property name="PACKAGE_DIR" value="dist" />
	<property name="PKG_NAME" value="${COMPONENT}.uno.pkg" />
	<property name="PKG_FILE" value="${PACKAGE_DIR}/${PKG_NAME}" />
	<property name="MD5SUMS_FILE_NAME" value="${PACKAGE_DIR}/md5sums.txt" />
	<property name="MISC" value="misc" />
	<property name="BUILD_INFO_FILE_NAME" value="buildinfo" />
	<property name="BUILD_INFO_FILE" value="${MISC}/${BUILD_INFO_FILE_NAME}" />
	<property name="VERSION_FILE" value="${MISC}/version"/>

	<property name="SRC_ENCODING" value="ISO8859-1" />
	
	<property name="WollMux_REG_NAME" value="de.muenchen.allg.itd51.wollmux.comp.WollMux" />
	<property name="WollMux_COMPJAR" value="${RDB_DIR}/${COMPONENT}.uno.jar" />
	
	<property name="RDBFILE" value="${RDB_DIR}/${COMPONENT}.rdb" />

	<property name="MY_IDL" value="idl" />
	<property name="MY_CLASSES" value="bin" />

	<property name="OOO_PROGRAM_DIR" value="/opt/openoffice.org/program" />
	<property name="OOOCLS" value="/opt/openoffice.org/program/classes" />
	<property name="OOO_CLASSPATH" value="${OOOCLS}/juh.jar:${OOOCLS}/jurt.jar:${OOOCLS}/ridl.jar:${OOOCLS}/unoil.jar" />
	<property name="TYPES_RDB" value="${OOO_PROGRAM_DIR}/types.rdb" />
	<property name="OOO_SDK" value="/opt/openoffice.org_sdk" />
	<property name="SDK_IDL" value="${OOO_SDK}/idl" />
	
	<property name="BIN" value="bin" />
	<property name="SRC" value="src" />
	
	<property name="WOLLMUXBAR_JAR_NAME" value="WollMuxBar.jar" />
	<property name="WOLLMUXBAR_JAR" value="${PACKAGE_DIR}/${WOLLMUXBAR_JAR_NAME}" />
	<property name="UNOHELPER_SRC" value="../UNOHelper/src" />
	<property name="UNOHELPER_BIN" value="${BIN}" />
	<property name="TOOLING" value="${OOO_SDK}/classes" />
	<property name="TOOLING_MAIN_CLASS" value="com.sun.star.lib.loader.Loader" />
	<property name="WOLLMUXBAR_MAIN_CLASS" value="de.muenchen.allg.itd51.wollmux.dialog.WollMuxBar" />

	<target name="all" depends="WollMuxBar.jar,WollMux.oxt,md5sum" />

	<!-- The debug target doesn't do anything by itself, but for any targets executed later
	     the DEBUG property will be set. --> 
	<target name="debug">
		<property name="DEBUG" value="on" />
		<property name="OPTIMIZE" value="off" />
	</target>
	
	<target name="clean" >
	    <delete includeEmptyDirs="true">
	    	<fileset dir="${MY_IDL}" includes="**/*.urd" />
	    	<fileset dir="${BIN}" includes="de/**" />
	    	<fileset file="${RDBFILE}" />
	    	<fileset file="${MD5SUMS_FILE_NAME}"/>
     		<fileset file="${WollMux_COMPJAR}" />
	    	<fileset file="${WOLLMUXBAR_JAR}" />
	    	<fileset file="${PKG_FILE}" />

	    	<!-- VERSION_FILE und BUILD_INFO_FILE **nicht** löschen, da diese nur bei
	    	Vorhandensein von svn oder git regeneriert werden können.
	    	<fileset file="${BUILD_INFO_FILE}" />
	    	<fileset file="${VERSION_FILE}" /> -->
	    </delete>
	</target>
	
	<target name="makeversion">
		<exec executable="misc/makeversion">
		  <arg line="${VERSION_FILE} ${BUILD_INFO_FILE}"/>
		</exec>		
		<loadfile property="VERSION" srcfile="${VERSION_FILE}" failonerror="true" />
	</target>
	
	<!-- Das Target compileidl erzeugt das rdb-file und die java-Interfaces -->
	<target name="compileidl">
		<echo level="info">idlc: Creating .urd files</echo>
		<apply executable="idlc" dest="${MY_IDL}">
			<arg line="-C -I${SDK_IDL}" />
			<fileset dir="${MY_IDL}" includes="**/*.idl" />
			<mapper type="glob" from="*.idl" to="*.urd"/>
		</apply>

		<delete file="${RDBFILE}" />
		<echo level="info" message="regmerge: Creating ${RDBFILE}" />
		<apply executable="regmerge" parallel="true">
			<arg line="'${RDBFILE}' /UCR" />
			<fileset dir="${MY_IDL}" includes="**/*.urd" />
		</apply>

		<echo level="info">javamaker: Creating .class files</echo>
		<apply executable="javamaker" relative="true" addsourcefile="false" dest="${BIN}">
			<arg line="-BUCR" />
			<targetfile />
		
			<!-- ATTENTION! The ./ before the ${BIN} is important or javamaker fails with
			the error message ERROR: Cannot create temporary file for bin/de/muenchen/allg/itd51/wollmux/....class
			-->
			<arg line="-nD ${TYPES_RDB} ${RDBFILE} -O ./${BIN}/" />
			<fileset dir="${MY_IDL}" includes="**/*.urd" />
  		    <mapper type="package" from="*.urd" to="-T*" />
		</apply>
	</target>
	
	<target name="compile" depends="compileidl">
		<property name="DEBUG" value="off" />
		<property name="OPTIMIZE" value="on" />

		<javac srcdir="${UNOHELPER_SRC}"
               destdir="${UNOHELPER_BIN}"
               classpath="${OOO_CLASSPATH}"
			   encoding="${SRC_ENCODING}"
               debug="${DEBUG}"
			   optimize="${OPTIMIZE}"
			   target="1.5"
   	    />
		
		<javac srcdir="${SRC}"
		               destdir="${BIN}"
		               classpath="${OOO_CLASSPATH}"
					   encoding="${SRC_ENCODING}"
		               debug="${DEBUG}"
					   optimize="${OPTIMIZE}"
					   target="1.5"
		/>
	</target>
	
	<target name="WollMuxBar.jar" depends="makeversion, compile">
		<delete file="${WOLLMUXBAR_JAR}" />
		<jar destfile="${WOLLMUXBAR_JAR}">
<!--			<fileset dir="${BIN}" includes="**/WollMuxBar*,**/dialog/UIElement*,**/ConfigThingy*,**/NodeNotFoundException*,**/SyntaxErrorException*,**/ConfigurationErrorException*,**/DispatchHandler*,**/L.class,**/Logger*,**/WollMuxFiles*,**/WollMuxBarEventHandler*,**/dialog/Common*,**/XPAL*,**/XWollMux*" />
			<fileset dir="${UNOHELPER_BIN}" includes="**/afid/*" /> -->
	  	    <fileset dir="${BIN}" includes="**/*.class"/>
			<fileset dir="${UNOHELPER_BIN}" includes="**/*.class" />
			<fileset dir="${TOOLING}" includes="**/*" />
			<fileset dir="${SRC}" includes="data/**/*" />
			<fileset file="${BUILD_INFO_FILE}" />
			<manifest>
				<attribute name="Main-Class" value="${TOOLING_MAIN_CLASS}" />
				<section name="com/sun/star/lib/loader/Loader.class">
					<attribute name="Application-Class" value="${WOLLMUXBAR_MAIN_CLASS}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<target name="WollMux.uno.jar" depends="compileidl, makeversion">
		<delete file="${WollMux_COMPJAR}" />
		<jar destfile="${WollMux_COMPJAR}">
			<fileset dir="${BIN}" includes="**/*.class"/>
			<fileset dir="${UNOHELPER_BIN}" includes="**/*.class" />
			<fileset dir="${TOOLING}" includes="**/*" />
			<fileset dir="${SRC}" includes="data/**/*" />
			<fileset file="${BUILD_INFO_FILE}" />
			<manifest>
				<attribute name="Bundle-Name" value="${COMPONENT}" />
				<attribute name="Bundle-Activator" value="${WollMux_REG_NAME}" />
				<attribute name="Bundle-SymbolicName" value="${COMPONENT}" />
				<attribute name="Bundle-Version" value="${VERSION}" />
				<attribute name="RegistrationClassName" value="${WollMux_REG_NAME}" />
			</manifest>
		</jar>
	</target>

    <target name="WollMux.oxt" depends="WollMux.uno.jar, makeversion">
		<delete file="${PKG_FILE}" />
		<zip destfile="${PKG_FILE}">
			<fileset file="${WollMux_COMPJAR}" />
			<fileset dir="${RDB_DIR}">
				<include name="*.xcu" />
				<include name="*.rdb" />
				<include name="META-INF/manifest.xml" />
			</fileset>
			<fileset file="${BUILD_INFO_FILE}" />
			<fileset dir="." includes="basic/**/*" />
		</zip>
	</target>

	<target name="md5sum" depends="WollMux.oxt, WollMuxBar.jar">
		<apply executable="md5sum" dir="${PACKAGE_DIR}" relative="true" failifexecutionfails="false" output="${MD5SUMS_FILE_NAME}" append="false" parallel="true">
			<fileset dir="${PACKAGE_DIR}" includes="${PKG_NAME},${WOLLMUXBAR_JAR_NAME}"/>
		</apply>
	</target>	
	
	<!-- Das Target install installiert/reinstalliert das erzeugte uno-package -->
	<target name="install" depends="WollMux.oxt">
		<echo level="info">unopkg remove ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="remove ${PKG_NAME}" />
		</exec>
		<echo level="info">unopkg add ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="add ${PKG_FILE}" />
		</exec>
		
		<tstamp><format property="mytime" pattern="HH:mm:ss"/></tstamp>
		<echo level="info" message="Install finished at ">${mytime}</echo>
	</target>
		
	<!-- Das Target erzeugt das Debian-Paket -->
	<target name="deb" depends="all">
		<exec executable="${MAKE_DIR}/make" dir="${MAKE_DIR}" failifexecutionfails="true" failonerror="true">
          <env key="VERSION" value="${VERSION}" />
		</exec>
	</target>

	<!-- Das Target aktualisiert das LocalizationConf-File -->
	<target name="updateLocalizationConf">
		<java classname="de.muenchen.allg.itd51.wollmux.LocalizationUpdater" fork="true" classpath="${MY_CLASSES}" dir="${basedir}"/>
	</target>

</project>
