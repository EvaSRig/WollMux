<project default="main">
	<!--
	*****************************************************************
	Build-Datei für den WollMux.
	
	Test bla bla
	
	Die Build-Datei stellt Haupt Main-Targets zur Verfügung, die für
	die Erzeugung des WollMux interessant sind:
	* package: erzeugt ein WollMux.uno.pkg-Paket
	* install: erzeugt und installiert das WollMux.uno.pkg-Paket mit
	           unopkg add im Benutzerbereich.
	           
	Vorraussetzungen für die erfolgreiche Paketerzeugung:
	* <OOoPath>/program ist in der PATH-Variable
	* Nur unter Linux: Die Umgebungsvariable LD_LIBRARY_PATH muss
	  ebenfalls <OOoPath>/program enthalten.
	* Die Executables javamaker, idlc und regmerge des OOo2-SDKs werden
	  über die Pfad-Variable gefunden. Entweder Sie kopieren diese drei
	  Dateien nach <OOoPath>/program oder sie nehmen das Verzeichnis
	  <OOoSDK2>/(linux|windows)/bin in die Pfad-Variable auf.
	* Die Eclipse-Projekte OOo-SDK und UNOHelper sind aus dem 
	  svn-Repository ausgecheckt worden und befinden sich in den
	  entsprechenden Nachbarverzeichnissen zum WollMux-Projektverzeichnis.
    * Die Kommandozeilenversion von svn sollte installiert sein und im PATH
      stehen, damit die buildinfo-Datei erzeugt werden kann.
	
	Datum:  21.11.2005
	Author: Christoph Lutz (D-III-ITD-5.1), Matthias Benkmann (D-III-ITD-5.1)
	*****************************************************************
	-->

	<property name="COMPONENT" value="WollMux" />
	<property name="MAKE_DIR" value="." />
<!--	<exec executable="${MAKE_DIR}/makeversion" dir="${MAKE_DIR}" failifexecutionfails="false" failonerror="true" outputproperty="VERSION"/> -->
	<property name="VERSION" value="1.5.1" />
	<property name="PKG_NAME" value="${COMPONENT}.uno.pkg" />
	<property name="PKG_FILE" value="${PKG_NAME}" />
	<property name="RDB_DIR" value="oxt" />
	<property name="PACKAGE_DIR" value="dist" />
	<property name="MD5SUMS_FILE_NAME" value="${PACKAGE_DIR}/md5sums.txt" />
	<property name="MISC" value="misc" />
	<property name="BUILD_INFO_FILE_NAME" value="buildinfo" />
	<property name="BUILD_INFO_FILE" value="${MISC}/${BUILD_INFO_FILE_NAME}" />
	<property name="VERSION_FILE" value="${MISC}/version"/>

	<property name="WollMux_REG_NAME" value="de.muenchen.allg.itd51.wollmux.comp.WollMux" />
	<property name="WollMux_COMPJAR" value="${COMPONENT}.uno.jar" />
	
	<property name="RDBFILE" value="${RDB_DIR}/${COMPONENT}.rdb" />

	<property name="MY_IDL" value="idl" />
	<property name="MY_CLASSES" value="bin" />

	<property name="UNOHELPER_CLASSES" value="../UNOHelper/bin" />
	<property name="OOO_PROGRAM_DIR" value="/opt/openoffice.org/program" />
	<property name="TYPES_RDB" value="${OOO_PROGRAM_DIR}/types.rdb" />
	<property name="OOO_SDK" value="/opt/openoffice.org_sdk" />
	<property name="SDK_IDL" value="${OOO_SDK}/idl" />
	
	<property name="BIN" value="bin" />
	
	<property name="WOLLMUXBAR_JAR" value="${PACKAGE_DIR}/WollMuxBar.jar" />
	<property name="UNOHELPER_BIN" value="../UNOHelper/bin" />
	<property name="TOOLING" value="${OOO_SDK}/classes" />
	<property name="TOOLING_MAIN_CLASS" value="com.sun.star.lib.loader.Loader" />
	<property name="WOLLMUXBAR_MAIN_CLASS" value="de.muenchen.allg.itd51.wollmux.dialog.WollMuxBar" />

	<target name="main" depends="build" />

	<target name="clean" >
	    <delete includeEmptyDirs="true">
	    	<fileset dir="${MY_IDL}" includes="**/*.urd" />
	    	<fileset dir="${BIN}" includes="**/*" />
	    	<fileset file="${RDBFILE}" />
	    	<fileset file="${MD5SUMS_FILE_NAME}"/>
     		<fileset file="${WollMux_COMPJAR}" />

	    	<!-- VERSION_FILE und BUILD_INFO_FILE **nicht** löschen, da diese nur bei
	    	Vorhandensein von svn oder git regeneriert werden können.
	    	<fileset file="${BUILD_INFO_FILE}" />
	    	<fileset file="${VERSION_FILE}" /> -->
	    </delete>
	</target>
	
	<target name="makeversion">
		<exec executable="misc/makeversion">
		  <arg line="${VERSION_FILE} ${BUILD_INFO_FILE}"/>
		</exec>		
		<loadfile property="VERSION" srcfile="${VERSION_FILE}" failonerror="true" />
	</target>
	
	<!-- Das Target install installiert/reinstalliert das erzeugte uno-package -->
	<target name="install" depends="build">
		<echo level="info">unopkg remove ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="remove ${PKG_NAME}" />
		</exec>
		<echo level="info">unopkg add ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="add ${PKG_FILE}" />
		</exec>
		
		<tstamp><format property="mytime" pattern="HH:mm:ss"/></tstamp>
		<echo level="info" message="Install finished at ">${mytime}</echo>
	</target>
	
	<!-- Das Target erzeugt das WollMux.uno.pkg, die WollMuxBar.jar und die md5sumsDatei -->
	<target name="build" depends="package, WollMuxBar.jar">
		<delete file="${MD5SUMS_FILE_NAME}"/>
		<apply executable="md5sum" dir="packages" relative="true" failifexecutionfails="false" output="${MD5SUMS_FILE_NAME}" append="true">
			<fileset dir="packages" includes="WollMux.uno.pkg, WollMuxBar.jar"/>
		</apply>
	</target>	

	<!-- Das Target package registriert die Komponente und erzeugt ein uno.pkg-file -->
	<target name="package" depends="jarfile, buildinfo">
		<delete file="${PKG_FILE}" />
		<zip destfile="${PKG_FILE}">
			<fileset dir="${RDB_DIR}">
				<include name="${WollMux_COMPJAR}" />
				<include name="*.xcu" />
				<include name="*.rdb" />
				<include name="META-INF/manifest.xml" />
				<include name="${BUILD_INFO_FILE_NAME}" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="basic/**/*" />
			</fileset>
		</zip>
	</target>

	<!-- Das Target jarfile erzeugt die Java-Komponente WollMux -->
	<target name="jarfile" depends="javamake, buildinfo">
		<delete file="${RDB_DIR}/${WollMux_COMPJAR}" />
		<jar destfile="${RDB_DIR}/${WollMux_COMPJAR}">
			<fileset dir="${MY_CLASSES}" includes="**/*.class" />
			<fileset dir="${MY_IDL}" includes="**/*.class" />
			<fileset dir="${UNOHELPER_CLASSES}" includes="**/*.class" />
			<fileset dir="${BIN}" includes="data/**" />
			<fileset file="${BUILD_INFO_FILE}" />
			<manifest>
				<attribute name="Bundle-Name" value="${COMPONENT}" />
				<attribute name="Bundle-Activator" value="${WollMux_REG_NAME}" />
				<attribute name="Bundle-SymbolicName" value="${COMPONENT}" />
				<attribute name="Bundle-Version" value="${VERSION}" />
				<attribute name="RegistrationClassName" value="${WollMux_REG_NAME}" />
			</manifest>
		</jar>
	</target>

	<!-- Das Target erzeugt das buildinfo-File -->
	<target name="buildinfo">
		<exec executable="svn" output="${BUILD_INFO_FILE}" failifexecutionfails="false" failonerror="false">
			<arg line="info ." />
		</exec>
		<loadfile property="revision" srcfile="${BUILD_INFO_FILE}" failonerror="false">
			<filterchain>
				<linecontains>
					<contains value="Revision: " />
				</linecontains>
				<deletecharacters chars="\r" />
				<deletecharacters chars="\n" />
			</filterchain>
		</loadfile>
		<echo message="" file="${BUILD_INFO_FILE}" />
		<echo file="${BUILD_INFO_FILE}">Version: ${VERSION}, ${revision}</echo>
	</target>

	<!-- Das Target javamake erzeugt das rdb-file und die java-Interfaces -->
	<target name="javamake">
		<echo level="info">idlc:</echo>
		<apply executable="idlc">
			<arg line="-C -I${SDK_IDL}" />
			<fileset dir="${MY_IDL}" includes="**/*.idl" />
		</apply>

		<delete file="${RDBFILE}" />
		<echo level="info">regmerge:</echo>
		<apply executable="regmerge">
			<arg line="'${RDBFILE}' /UCR" />
			<fileset dir="${MY_IDL}" includes="**/*.urd" />
		</apply>

		<echo level="info">javamaker:</echo>
		<apply executable="javamaker" relative="true" addsourcefile="false" dest="${BIN}">
			<arg line="-BUCR" />
			<targetfile />
			
			<!-- ATTENTION! The ./ before the ${BIN} is important or javamaker fails with
			the error message ERROR: Cannot create temporary file for bin/de/muenchen/allg/itd51/wollmux/....class
			-->
			<arg line="-nD ${TYPES_RDB} ${RDBFILE} -O ./${BIN}/" />
			<fileset dir="${MY_IDL}" includes="**/*.urd" />
			<mapper>
				<mapper type="package" from="*.urd" to="-T*" />
			</mapper>
		</apply>
	</target>

	<!-- Das Target erzeugt die Datei WollMuxBar.jar -->		
	<target name="WollMuxBar.jar" depends="buildinfo">
		<delete file="${WOLLMUXBAR_JAR}" />
		<jar destfile="${WOLLMUXBAR_JAR}">
			<fileset dir="${BIN}" includes="**/*.class" />
			<fileset dir="${UNOHELPER_BIN}" includes="**/*.class" />
			<fileset dir="${TOOLING}" includes="**/*" />
			<fileset dir="${BIN}" includes="data/**" />
			<fileset file="${BUILD_INFO_FILE}" />
			<manifest>
				<attribute name="Main-Class" value="${TOOLING_MAIN_CLASS}" />
				<section name="com/sun/star/lib/loader/Loader.class">
					<attribute name="Application-Class" value="${WOLLMUXBAR_MAIN_CLASS}" />
				</section>
			</manifest>
		</jar>
	</target>
		
	<!-- Das Target erzeugt das Debian-Paket -->
	<target name="deb" depends="build">
		<exec executable="${MAKE_DIR}/make" dir="${MAKE_DIR}" failifexecutionfails="true" failonerror="true">
          <env key="VERSION" value="${VERSION}" />
		</exec>
	</target>

	<!-- Das Target aktualisiert das LocalizationConf-File -->
	<target name="updateLocalizationConf">
		<java classname="de.muenchen.allg.itd51.wollmux.LocalizationUpdater" fork="true" classpath="${MY_CLASSES}" dir="${basedir}"/>
	</target>

</project>
